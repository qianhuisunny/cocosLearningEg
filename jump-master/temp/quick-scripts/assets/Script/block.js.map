{"version":3,"sources":["block.js"],"names":["cc","Class","extends","Component","properties","blockPlygon","PolygonCollider","centerNode","Node","scoreNode","onLoad","score","update","dt","jumpCheck","touchLoc","success","failure","isInBlock","getScore","playAnimation","getDistance","p1","p2","sub","mag","worldPos","inBlock","Intersection","pointInPolygon","world","points","localPos","node","convertToNodeSpaceAR","dis","position","getComponent","Label","string","Animation","play"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,qBAAaL,GAAGM,eADR;AAERC,oBAAYP,GAAGQ,IAFP;AAGRC,mBAAWT,GAAGQ;AAHN,KAHP;;AASLE,YAAQ,kBAAY;AACjB,aAAKC,KAAL,GAAa,CAAb;AACF,KAXI;;AAaLC,YAAQ,gBAAUC,EAAV,EAAc,CAErB,CAfI;;AAiBLC,aAjBK,qBAiBKC,QAjBL,EAiBeC,OAjBf,EAiBwBC,OAjBxB,EAiBgC;AACjC,YAAG,KAAKC,SAAL,CAAeH,QAAf,CAAH,EAA4B;AACxB,iBAAKI,QAAL,CAAcJ,QAAd;AACA,iBAAKK,aAAL;AACAJ,oBAAQ,KAAKL,KAAb;AACH,SAJD,MAIK;AACDM;AACH;AACJ,KAzBI;;;AA2BL;AACAI,eA5BK,uBA4BOC,EA5BP,EA4BWC,EA5BX,EA4Bc;AACf,eAAOD,GAAGE,GAAH,CAAOD,EAAP,EAAWE,GAAX,EAAP;AACH,KA9BI;;;AAgCL;AACAP,aAjCK,qBAiCKQ,QAjCL,EAiCc;AACf,YAAIC,UAAU,KAAd;AACA,YAAG3B,GAAG4B,YAAH,CAAgBC,cAAhB,CAA+BH,QAA/B,EAAyC,KAAKrB,WAAL,CAAiByB,KAAjB,CAAuBC,MAAhE,CAAH,EAA2E;AACvEJ,sBAAU,IAAV;AACH;;AAED,eAAOA,OAAP;AACH,KAxCI;;;AA0CL;AACAR,YA3CK,oBA2CIO,QA3CJ,EA2Ca;AACd,YAAIM,WAAW,KAAKC,IAAL,CAAUC,oBAAV,CAA+BR,QAA/B,CAAf;AACA,YAAIS,MAAM,KAAKd,WAAL,CAAiB,KAAKd,UAAL,CAAgB6B,QAAjC,EAA2CJ,QAA3C,CAAV;;AAEA,YAAGG,MAAM,EAAT,EAAY;AACR,iBAAKxB,KAAL,GAAa,CAAb;AACH,SAFD,MAEM,IAAGwB,OAAO,EAAP,IAAaA,MAAM,EAAtB,EAAyB;AAC3B,iBAAKxB,KAAL,GAAa,EAAb;AACH,SAFK,MAEA,IAAGwB,OAAO,EAAP,IAAaA,MAAM,EAAtB,EAAyB;AAC3B,iBAAKxB,KAAL,GAAa,EAAb;AACH,SAFK,MAEA,IAAGwB,OAAO,EAAP,IAAaA,MAAM,EAAtB,EAAyB;AAC3B,iBAAKxB,KAAL,GAAa,EAAb;AACH,SAFK,MAED;AACD,iBAAKA,KAAL,GAAa,EAAb;AACH;AACJ,KA1DI;AA4DLS,iBA5DK,2BA4DU;AACX,aAAKX,SAAL,CAAe4B,YAAf,CAA4BrC,GAAGsC,KAA/B,EAAsCC,MAAtC,GAA+C,MAAM,KAAK5B,KAA1D;AACA,aAAKF,SAAL,CAAe4B,YAAf,CAA4BrC,GAAGwC,SAA/B,EAA0CC,IAA1C;AACH;AA/DI,CAAT","file":"block.js","sourceRoot":"../../../../assets/Script","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        blockPlygon: cc.PolygonCollider,\n        centerNode: cc.Node,\n        scoreNode: cc.Node\n    },\n\n    onLoad: function () {\n       this.score = 0;\n    },\n\n    update: function (dt) {\n\n    },\n\n    jumpCheck(touchLoc, success, failure){\n        if(this.isInBlock(touchLoc)){\n            this.getScore(touchLoc);\n            this.playAnimation();\n            success(this.score)\n        }else{\n            failure();\n        }\n    },\n\n    //判断亮点间距离\n    getDistance(p1, p2){\n        return p1.sub(p2).mag();\n    },\n\n    //判断是否在方块中\n    isInBlock(worldPos){\n        let inBlock = false;\n        if(cc.Intersection.pointInPolygon(worldPos, this.blockPlygon.world.points)){\n            inBlock = true;\n        }\n\n        return inBlock;\n    },\n\n    //根据落点与中心点的距离计算分数\n    getScore(worldPos){\n        let localPos = this.node.convertToNodeSpaceAR(worldPos);\n        let dis = this.getDistance(this.centerNode.position, localPos);\n\n        if(dis > 70){\n            this.score = 1;\n        }else if(dis <= 70 && dis > 50){\n            this.score = 10;\n        }else if(dis <= 50 && dis > 35){\n            this.score = 20;\n        }else if(dis <= 35 && dis > 20){\n            this.score = 30;\n        }else{\n            this.score = 50;\n        }\n    },\n\n    playAnimation(){\n        this.scoreNode.getComponent(cc.Label).string = '+' + this.score;\n        this.scoreNode.getComponent(cc.Animation).play();\n    }\n});\n"]}